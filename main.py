from aiogram import Bot, Dispatcher
from aiogram import filters
from aiogram.filters import Command, CommandStart, StateFilter, Text
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.types import (Message, InlineKeyboardMarkup, InlineKeyboardButton,CallbackQuery, FSInputFile)
from config import *
from Buttons import *
import html
base = {}
bot: Bot = Bot(token=token)
dp: Dispatcher = Dispatcher(bot=bot)


# app = FastAPI()
#
#
# @app.get("/")
# def root():
#     return "Hello from Space! üöÄ"


class FSMFillForm(StatesGroup):
    zakaz = State()
    name = State()
    age = State()

@dp.message(CommandStart())
async def start(message: Message):
    await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—åüëã, {message.from_user.first_name}!\n\n–Ø - ü§ñ, –±–æ—Ç Kosher Moscow Devilery "
                 "—Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ, "
                 "—á—Ç–æ–±—ã –ø–æ–º–æ—á—å –í–∞–º —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –Ω–∞—à–µ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏!"
                 "\n\n"
                 "<i>–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é üëá</i>", parse_mode='html', reply_markup=keyb1)


@dp.message(lambda x: x.text == 'üìî –ü—Ä–∞–π—Å-–õ–∏—Å—Ç')
async def list(message: Message):
    Fyle = FSInputFile(path='price.pdf')
    await bot.send_document(message.chat.id, document=Fyle)

@dp.message(lambda x: x.text == 'üì• –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')
async def register(message: Message, state: FSMContext):
    base[message.from_user.id] = {}
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –í–∞—à–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é üëá')
    await state.set_state(FSMFillForm.name)


@dp.message(StateFilter(FSMFillForm.name), lambda x: len(x.text.split()) == 2)
async def register_name(message: Message, state: FSMContext):
    base[message.chat.id]['–§–ò–û –∫–ª–∏–µ–Ω—Ç–∞'] = message.text
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞(–≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ - 89999999999)üëá')
    await state.set_state(FSMFillForm.age)


@dp.message(StateFilter(FSMFillForm.name))
async def warning_register_name(message: Message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ')


@dp.message(StateFilter(FSMFillForm.age),lambda x:x.text.isdigit())
async def register_age1(message: Message, state:FSMContext):
    base[message.chat.id]['–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'] = message.text
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ü–∏—é –∏ –µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ üëá')
    await state.set_state(FSMFillForm.zakaz)


@dp.message(StateFilter(FSMFillForm.age))
async def warning_register_age(message: Message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ')


@dp.message(StateFilter(FSMFillForm.zakaz), lambda x: len(x.text) >= 1)
async def zakaz2(message: Message, state:FSMContext):
    messagetext = message.text
    base[message.from_user.id]['–ó–∞–∫–∞–∑'] = messagetext
    await bot.send_message(channel_id, f'{base[message.from_user.id]}')
    await message.answer('–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑üôÇ! –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –º—ã —Å –í–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è!')
    base[message.from_user.id] = {}
    await state.clear()

@dp.message(lambda x: x.text == '‚òé –ö–æ–Ω—Ç–∞–∫—Ç—ã')
async def contact1(message: Message):
    await message.answer(f'{message.from_user.first_name}, –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å–≤—è–∑–∏üòå\n üëáüëáüëá'
                         , reply_markup= keyb2)


@dp.message(lambda x: x.text == 'üì© Telegram')
async def contact1(message: Message):
    await message.answer('@lansky_770'
                         , reply_markup= keyb1)


@dp.message(lambda x: x.text == 'üì© WhatsApp')
async def contact1(message: Message):
    await message.answer('https://wa.link/z8gdav>'
                         , reply_markup= keyb1)


if __name__ == '__main__':
    dp.run_polling(bot)
